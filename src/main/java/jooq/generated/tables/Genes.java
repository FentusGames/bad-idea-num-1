/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import jooq.generated.DefaultSchema;
import jooq.generated.Keys;
import jooq.generated.tables.records.GenesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Genes extends TableImpl<GenesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>genes</code>
     */
    public static final Genes GENES = new Genes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenesRecord> getRecordType() {
        return GenesRecord.class;
    }

    /**
     * The column <code>genes.id</code>.
     */
    public final TableField<GenesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>genes.gene_id</code>.
     */
    public final TableField<GenesRecord, String> GENE_ID = createField(DSL.name("gene_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>genes.encodedSymbol</code>.
     */
    public final TableField<GenesRecord, String> ENCODEDSYMBOL = createField(DSL.name("encodedSymbol"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>genes.description</code>.
     */
    public final TableField<GenesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>genes.disease</code>.
     */
    public final TableField<GenesRecord, String> DISEASE = createField(DSL.name("disease"), SQLDataType.CLOB, this, "");

    private Genes(Name alias, Table<GenesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Genes(Name alias, Table<GenesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>genes</code> table reference
     */
    public Genes(String alias) {
        this(DSL.name(alias), GENES);
    }

    /**
     * Create an aliased <code>genes</code> table reference
     */
    public Genes(Name alias) {
        this(alias, GENES);
    }

    /**
     * Create a <code>genes</code> table reference
     */
    public Genes() {
        this(DSL.name("genes"), null);
    }

    public <O extends Record> Genes(Table<O> child, ForeignKey<O, GenesRecord> key) {
        super(child, key, GENES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<GenesRecord, Integer> getIdentity() {
        return (Identity<GenesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GenesRecord> getPrimaryKey() {
        return Keys.PK_GENES;
    }

    @Override
    public List<UniqueKey<GenesRecord>> getKeys() {
        return Arrays.<UniqueKey<GenesRecord>>asList(Keys.PK_GENES);
    }

    @Override
    public Genes as(String alias) {
        return new Genes(DSL.name(alias), this);
    }

    @Override
    public Genes as(Name alias) {
        return new Genes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Genes rename(String name) {
        return new Genes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Genes rename(Name name) {
        return new Genes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
